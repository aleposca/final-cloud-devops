{
    "kind": "ConfigMap",
    "apiVersion": "v1",
    "metadata": {
        "name": "watcherfiles",
        "creationTimestamp": null
    },
    "data": {
        "inotify.sh": "#!/bin/bash\nDIR=\"/watched\"\ninotifywait -m -e create \"$DIR\" | while read f\n\ndo\n    # you may want to release the monkey after the test :)\n    echo monkey\n    # \u003cwhatever_command_or_script_you_liketorun\u003e\ndone\n",
        "watcher.py": "import time, requests, re, ntpath, json\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\ndef getApiKey():\n    file=open(\"/config/config.xml\",\"r\")\n    str=file.read()\n\n    pattern = r\"\u003capikey\u003e(.*?)\u003c/apikey\u003e\"\n    apikey = re.findall(pattern, str, flags=0)\n    return(apikey[0])\n\ndef getFileContent(fpath):\n    f=open(fpath,\"r\")\n    peerID=f.read()\n    return peerID.rstrip()\n\ndef updateConfig(event):\n    API_ENDPOINT = \"http://127.0.0.1:8384/rest/system/config\"\n    API_KEY = getApiKey()\n\n    HEADERS = {'X-API-Key':API_KEY}\n    print(HEADERS)\n\n    name=ntpath.basename(event.src_path)\n    peerID=getFileContent(event.src_path)\n    print(\"NEW DEVICE - \",name, peerID)\n    newDev = {'autoAcceptFolders': True, 'introducedBy': '', 'maxSendKbps': 0, 'skipIntroductionRemovals': False, 'paused': False, 'compression': 'metadata', 'name':\n ''+name+'', 'addresses': ['dynamic'], 'maxRecvKbps': 0, 'deviceID': ''+peerID+'', 'certName': '', 'introducer': True, 'allowedNetworks': []}\n\n    response = requests.get(API_ENDPOINT, headers=HEADERS)\n    OBJ = json.loads(response.text)\n    OBJ[\"devices\"].append(newDev)\n    print(json.dumps(OBJ,separators=(',', ':')))\n    PL = json.dumps(OBJ,separators=(',', ':'))\n    res = requests.post(API_ENDPOINT, data=PL, headers=HEADERS)\n\nclass Watcher:\n    DIRECTORY_TO_WATCH = \"/watched/\"\n\n    def __init__(self):\n        self.observer = Observer()\n\n    def run(self):\n        event_handler = Handler()\n        self.observer.schedule(event_handler, self.DIRECTORY_TO_WATCH, recursive=False)\n        self.observer.start()\n        try:\n            while True:\n                time.sleep(5)\n        except:\n            self.observer.stop()\n            print(\"Error\")\n\n        self.observer.join()\n\n\nclass Handler(FileSystemEventHandler):\n\n    @staticmethod\n    def on_any_event(event):\n        if event.is_directory:\n            return None\n\n        elif event.event_type == 'created':\n            # Take any action here when a file is first created.\n            print(\"Received created event - %s.\" % event.src_path)\n            #doingJob(event)\n            updateConfig(event)            \n\n        elif event.event_type == 'modified':\n            # Taken any action here when a file is modified.\n            print(\"Received modified event - %s.\" % event.src_path)\n            #doingJob(event)\n            updateConfig(event)\n\nif __name__ == '__main__':\n    #getConfigData()\n    w = Watcher()\n    w.run()\n"
    }
}
